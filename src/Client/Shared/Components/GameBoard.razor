@using Microsoft.AspNetCore.SignalR.Client
@using KingSkullClassicOnline.Client.Shared.Popups
@using KingSkullClassicOnline.Shared
@inherits ComponentBase
@inject IDialogService DialogService
@inject ILogger<GameBoard> Logger

@if (!IsVisible)
{
    return;
}

<PageTitle>Jeu</PageTitle>

<div class="relative">
    <div class="d-inline-flex parchment-game">
        <div class="parchment-bg-game"></div>
        <MudText
            Class="pa-4 rounds"
            Typo="Typo.h3"
            Align="Align.Left">
            @_game.CurrentFold / @_game.Turn
        </MudText>
    </div>
    <MudStack Class="buttons">
        <RulesButton/>

        <MudTooltip
            Text="Scores"
            Duration="1000"
            Placement="Placement.Left">
            <MudIconButton
                Icon="@Icons.Filled.GridOn"
                Variant="Variant.Filled"
                OnClick="OpenScores"
                Color="Color.Secondary"
                Size="Size.Large"/>
        </MudTooltip>
    </MudStack>

    <div class="d-flex justify-space-around flex-wrap mt-15 gap-4 pl-6 pr-6 parchment-game pt-4">
        <div class="parchment-bg-game board"></div>

        @foreach (var (_, player) in _game.Players)
        {
            <div>
                <MudText Typo="Typo.h5"
                         Align="Align.Center">
                    @player.Scores[_game.Turn].Actual / @player.Scores[_game.Turn].Voted
                </MudText>
                <MudText Typo="Typo.h5"
                         Class="@($"mb-2 pseudo {(player.Data.Id == Connection.ConnectionId ? "self" : "")}")"
                         Align="Align.Center">
                    @player.Data.Name
                </MudText>
                @if (player.PlayedCard == null)
                {
                    <Card CardName="Back" Class="player-card back"/>
                }
                else
                {
                    <Card CardName="@player.PlayedCard.Name"
                          Class="@($"player-card {(player.PlayedCard.IsWinning ? "winning" : "")}")"/>
                }

            </div>
        }
    </div>
    <HandGame Class="hand" Cards="_game.Players[Connection.ConnectionId!].Hand" OnCardClick="CardClicked"/>
</div>

<svg style="height: 0">
    <filter id="wavy2">
        <feTurbulence x="0" y="0" baseFrequency="0.01" numOctaves="10" seed="1"/>
        <feDisplacementMap in="SourceGraphic" scale="20"/>
    </filter>
</svg>
<svg style="height: 0">
    <filter id="wavy3">
        <feTurbulence x="0" y="0" baseFrequency="0.01" numOctaves="6" seed="3"/>
        <feDisplacementMap in="SourceGraphic" scale="20"/>
    </filter>
</svg>

@code {

    [Parameter]
    public HubConnection Connection { get; set; } = null!;

    [Parameter]
    public bool IsVisible { get; set; }

    private Game _game = new();

    private async Task<int> AskVote(int maxVote)
    {
        var options = new DialogOptions { CloseOnEscapeKey = false, CloseButton = false, DisableBackdropClick = true };
        var parameters = new DialogParameters { ["MaxValue"] = maxVote };
        var dialog = DialogService.Show<VotePopup>("Votez !", parameters, options);
        var result = await dialog.Result;
        return (int)result.Data;
    }

    protected override Task OnInitializedAsync()
    {
        Connection.On(Events.HandChanged, (List<string> newHand) =>
        {
            Logger.LogInformation($"{Events.HandChanged}: {newHand}");
    // _cards = newHand.Select(c => new HandGame.Card(c)).ToList();
            StateHasChanged();
        });
        Connection.On(Events.VoteAsked, async (int minVote, int maxVote) =>
        {
            Logger.LogInformation($"{Events.VoteAsked}: {minVote} - {maxVote}");
            var vote = await AskVote(maxVote);
            await Connection.SendAsync(Events.SendVote, vote);
        });
        Connection.On(Events.MustPlay, (IEnumerable<string> playableCards) =>
        {
            Logger.LogInformation($"{Events.MustPlay}: {string.Join(",", playableCards)}");
    // _isMyTurn = true;
    // _cards = _cards.Select(c => new HandGame.Card(c.Name, playableCards.Contains(c.Name))).ToList();
            StateHasChanged();
        });
        Connection.On(Events.RoundStarted, (string[] players, int[] scores) =>
        {
            Logger.LogInformation($"{Events.RoundStarted}: {string.Join(",", players)} - {string.Join(",", scores)}");
    // _players = players.Select((p, i) =>
    //     new Player(
    //         new PlayerData(p, i.ToString()),
    //         new PlayerCard("", false),
    //         new PlayerScore(0, scores[i])))
    //     .ToList();
            StateHasChanged();
        });

        Connection.On(Events.RoundEnded, (int[] scores) =>
        {
            Logger.LogInformation($"{Events.RoundEnded}: {string.Join(",", scores)}");

    // for (var i = 0; i < scores.Length; i++)
    // {
    //     _players[i].Score.Actual = scores[i];
    // }
            StateHasChanged();
        });
        Connection.On(Events.CardPlayed, (string player, string card, string winnerName) =>
        {
            Logger.LogInformation($"{Events.CardPlayed}: {player} - {card} - {winnerName}");
    // foreach (var p in _players)
    // {
    //     if (p.Data.Name == player)
    //     {
    //         p.Card.Name = card;
    //         Console.WriteLine("update card");
    //     }
    //     if (p.Data.Name == winnerName)
    //     {
    //         p.Card.IsWinning = true;
    //         Console.WriteLine("update winner");
    //     }
    // }
            StateHasChanged();
        });
        Connection.On(Events.GameStarted, () =>
        {
            Console.WriteLine("test");
            // sss
            
        });

        return Task.CompletedTask;
    }

    private async void CardClicked(string card)
    {
        Logger.LogInformation($"Clicked on {card}");
        await Connection.SendAsync(Events.PlayCard, card);
    }

    private void OpenScores()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<ScoresPopup>("Tableau des scores", options);
    }

}