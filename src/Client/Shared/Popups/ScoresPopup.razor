@using KingSkullClassicOnline.Engine
<div>
    <BaseDialog>
        <MudTable Items="_scoresReformat"
                  Hover="true"
                  Breakpoint="Breakpoint.None"
                  Bordered="true"
                  Striped="true"
                  Outlined="true">
            <HeaderContent>
                <MudTh Class="left last-col">N°</MudTh>
                @foreach (var player in Players)
                {
                    <MudTh colspan="3" Class="last-col">@player.Name</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd Class="left last-col">@GetRowNumber(context)</MudTd>

                @for (var k = 0; k < Players.Count; k++)
                {
                    var i = k;
                    <MudTd DataLabel="">@context[i].Voted</MudTd>
                    <MudTd DataLabel="">@context[i].Actual</MudTd>
                    <MudTd DataLabel="" Class="last-col">@context[i].Total</MudTd>
                }
            </RowTemplate>
        </MudTable>
    </BaseDialog>
</div>

@code {
    // private readonly (int, int, int)[][] _scoresReformat = new (int, int, int)[Config.RoundsPerGame][];
    private readonly PlayerScore[][] _scoresReformat = new PlayerScore[Config.RoundsPerGame][];

    [Parameter]
    public List<Player> Players { get; set; } = null!;

    public int? GetRowNumber(object element)
    {
        return _scoresReformat.TakeWhile(x => x != element).Count() + 1;
    }

    protected override Task OnInitializedAsync()
    {
        for (var i = 0; i < Config.RoundsPerGame; i++)
        {
            _scoresReformat[i] = new PlayerScore[Players.Count];

            for (var x = 0; x < Players.Count; x++)
            {
                _scoresReformat[i][x] = Players[x].Scores[i];
            }
        }
        return Task.CompletedTask;
    }

}