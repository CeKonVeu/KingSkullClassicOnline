@page "/"
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@using Microsoft.AspNetCore.SignalR.Client
@using KingSkullClassicOnline.Engine
@implements IAsyncDisposable

<PageTitle>Test</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput"/>
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50"/>
    </label>
</div>

<MudButton @onclick="VotePopup" Variant="Variant.Filled" Color="Color.Primary">
    Send
</MudButton>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>
<div class="form-group">
    <label>
        lobbyName:
        <input @bind="lobbyInput"/>
    </label>
</div>
<ul>
    <li>@lobbyName</li>
</ul>
<p>
    <button @onclick="TriggerPrompt">Trigger browser window prompt</button>
    <button @onclick="Animate">Animation</button>
</p>
<div class="form-group">
    <p>
        <button @onclick="ConnectToGroup">ROOM</button>
    </p>
</div>


<p>
    @result
</p>

<div class="card">
    <img src="https://exlibris.azureedge.net/screenshots/4001/5047/5024/4/4001504750244_s5.jpg" class="card-image" draggable="false">
</div>


@code {
    private HubConnection? hubConnection;
    private readonly List<string> messages = new();
    private string? userInput;
    private string? messageInput;
    private string? lobbyInput;
    private IJSObjectReference importedDHTML;
    private IJSObjectReference? module;
    private string? result;
    private string? lobbyName;
    int vote;

    public static int turnNumber = 10; // TODO = controller.Turn
    readonly Player p = new("Paul", new Controller()); // TODO = lui meme

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "../Pages/Index.razor.js");
        }
    }

    private async Task TriggerPrompt()
    {
        result = await Prompt("Provide some text");
    }

    private async Task Animate()
    {
        if (module is not null) await module.InvokeVoidAsync("init");
    }


    public async ValueTask<string?> Prompt(string message)
    {
        return module is not null ?
            await module.InvokeAsync<string>("showPrompt", message) : null;
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        await hubConnection.StartAsync();
    //Change the group name and leave the old one
        hubConnection.On<string>("ReceiveLobbyName", lobbyName =>
        {
            var ancientLobbyName = this.lobbyName;
            this.lobbyName = lobbyName;
            if (lobbyName != ancientLobbyName)
                hubConnection.SendAsync("LeaveGroup", ancientLobbyName);
            StateHasChanged();
        });

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });
        StateHasChanged();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput, lobbyName);
        }
    }

    async Task VotePopup()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<VotePopup>("Votez !", options);
        var result = await dialog.Result;

        vote = Convert.ToInt32(result.Data);

        p.setVote(vote);
    }

    private async Task ConnectToGroup()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("CreateGroup", lobbyInput, userInput);
        }
    }


    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

}