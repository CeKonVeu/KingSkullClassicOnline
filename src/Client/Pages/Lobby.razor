@page "/lobby"
@page "/lobby/{roomName}"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@using KingSkullClassicOnline.Client.Shared.Components
@implements IAsyncDisposable

<WaitingRoom Url="@_url" IsVisible="_isVisible" Names="_players" IsOwner="_isOwner"/>

<button @onclick="() => _isVisible = !_isVisible">test</button>
<button @onclick="() => _url = string.Empty">clear</button>
<button @onclick="() => _players.Add(Random.Shared.Next().ToString())">clear</button>

@code {
    private bool _isVisible = true;

    private bool _isOwner;

    private string _url = "http://localhost:5000/lobby";

    private List<string> _players = new();

    private HubConnection _connection = null!;

    [Parameter]
    public string? RoomName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/connectRoom"))
            .Build();

        SetHandlers();

        await _connection.StartAsync();

        if (RoomName is not null)
        {
            await JoinRoom(RoomName);
        }
        else
        {
            _isOwner = true;
            await CreateRoom();
        }
    }

    private async Task JoinRoom(string roomName)
    {
        await _connection.SendAsync("JoinRoom", roomName, "alice GRUNDER");
    }

    private async Task CreateRoom()
    {
        await _connection.SendAsync("CreateRoom", "bob");
    }

    private void SetHandlers()
    {
        Console.WriteLine("SetHandlers");
        _connection.On("RoomChanged", (string roomName, List<string> players) =>
        {
            _url = roomName;
            _players = players;
            Console.WriteLine($"RoomChanged: {roomName}");
            StateHasChanged();
        });
    }

    public async ValueTask DisposeAsync()
    {
        await _connection.DisposeAsync();
    }

}