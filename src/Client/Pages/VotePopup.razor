<MudDialog>
    <DialogContent>
        <h1>@Value1</h1>
        <h1>@Count</h1>
    </DialogContent>
    <DialogActions>
        <MudSlider TickMarks="true" TickMarkLabels="@votes" Min="0" Max="@Index.turnNumber" Step="1" @bind-Value="@Value1" Immediate="true"/>
        <MudButton Color="Color.Primary" OnClick="Submit">Vote</MudButton>
    </DialogActions>
</MudDialog>


@functions {
    private int Count { get; set; } = 10;

    public double? Value1 { get; set; } = 5;

    void StartCountdown()
    {
        var timer = new Timer(_ =>
        {
            if (Count > 0)
            {
                Count--;

                InvokeAsync(() => { StateHasChanged(); });
            }
            else
            {
    // TODO Transmettre la valeur du slider dans le submit
                Submit();
            }
        }, null, 1000, 1000);
    }

}

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    readonly string[] votes = Enumerable.Range(0, Index.turnNumber + 1).ToArray().Select(x => x.ToString()).ToArray();

    // TODO Enregistrer le vote
    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(Value1));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StartCountdown();
        }
    }

}